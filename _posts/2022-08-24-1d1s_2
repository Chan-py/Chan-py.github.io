---
layout: post
title: 1d1s 2일차

toc: true
toc_sticky: true

date: 2022-08-24
last_modified_at: 2020-08-25
---

## [백준 1946번](https://www.acmicpc.net/problem/1946) 풀이
본 문제는 정렬 알고리즘을 사용해야 한다. 정렬 기준으로 삼을 수 있는 요소가 서류심사 성적과 면접평가 성적, 2가지가 있으므로 둘 중 하나를 기준으로 정렬 후 다른 기준을 비교한다.
#### 정렬
A의 서류 성적과 면접 성적이 둘 다 B의 서류 성적과 면접 성적과 낮으면 뽑힐 수 없으므로 서류 성적으로 정렬 했을 시 서류 성적의 1등의 면접 성적보다 낮은 면접 성적을 가지고 있는 사람은 두 점수 모두 .   

~~~python
import sys
input = sys.stdin.readline
T = int(input())
for _ in range(T):
	n = int(input())
	lst = []
	for i in range(n):
		lst.append(list(map(int, input().split())))
	lst.sort()
	st = lst[0][1]
	ans = 1
	for i in range(1, n):
		if st > lst[i][1]:
			st = lst[i][1]
			ans += 1
	print(ans)
~~~
   
#### 2. dfs를 이용한 백트래킹
인덱스를 나타내는 숫자 n과 답을 출력할 때 사용할 배열 arr를 인자로 가지는 함수를 선언해준다. 배열을 인자로 가지는 이유는 깊이 탐색 중 위로 한단계 나올 때 배열에 있는 마지막 수가 빠져야 하기 때문에 이를 저장해주기 위함이다.   
이후 0부터 시작해 k-1번째의 인덱스를 i로 중심을 잡아 i+1 부터 k-1번째 인덱스까지를 계속 반복한다.
~~~python
import sys
input = sys.stdin.readline

def dfs(n, arr):
    global S
    if len(arr) == 6:
        print(*arr)
        return
    if n >= len(S):
        return
    for i in range(n+1, k):
        dfs(i, arr + [S[i]])
    return

while True:
	k, *S = map(int, input().split())
	if k == 0:
		break
	ans = []
	for i in range(k):
		dfs(i, ans + [S[i]])
	print()
~~~
예시를 들면 쉽게 이해가 가능하다. 1 2 3 4 5 6 7 이 S로 주어졌을 때 계통수를 그려나간다는 생각을 해보자.
![dfs 설명](/images/dfs설명.png)
이처럼 1에서 다음 깊이로 넘어가 2부터 7에서 또 다음 깊이로 넘어가 3부터 7을, ... 쭉 들어가면서 배열의 길이가 6이 되면 출력해주는 형식이다. 또한 각 깊이에서 탐색이 끝난 후 이전 깊이의 다음 수를 진행시키기 위해 return하는 것은 필수적이다. 본 문제는 dfs의 기본 개념만 알고 있으면 쉬운 문제이므로 dfs에 대한 설명을 참조한다.   
[dfs설명](https://gmlwjd9405.github.io/2018/08/14/algorithm-dfs.html)   
이후 bfs에 대해 공부하는 것을 추천한다. 
